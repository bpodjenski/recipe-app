<h4 class="mb-4">Comments</h4>

<% if (recipe.Comments.length === 0) { %>
  <p class="text-muted fst-italic">No comments yet. Be the first!</p>
<% } else { %>
    <div class="list-group mb-5 shadow-sm">
        <% recipe.Comments.forEach(comment => { %>
            <div class="list-group-item p-3 rounded-3 border d-flex flex-column flex-md-row gap-3">
            
            <!-- Avatar -->
            <div class="flex-shrink-0 d-none d-md-flex justify-content-center align-items-start">
                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                     style="width: 36px; height: 36px; font-weight: 600; font-size: 1rem;">
                  <%= comment.person ? comment.person.charAt(0).toUpperCase() : '?' %>
                </div>
            </div>
        
            <!-- Content -->
            <div class="flex-grow-1 w-100">
                <!-- Name & Timestamp (stacked on mobile) -->
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start mb-1">
                <strong class="text-primary me-2"><%= comment.person || 'Anonymous' %></strong>
                <small class="text-muted" data-utc="<%= comment.date.toISOString() %>">Loading time...</small>
                </div>
        
                <!-- Comment text -->
                <p class="mb-2" style="white-space: pre-wrap;"><%= comment.text %></p>
        
                <!-- Voting controls -->
                <div class="d-flex align-items-center gap-2 flex-wrap">
                <button type="button" class="btn btn-outline-success btn-sm vote-btn py-0 px-2" 
                        data-id="<%= comment.id %>" data-vote="upvote" aria-label="Upvote">
                    üëç
                </button>
                <span class="text-success fw-semibold small"><%= comment.upvotes || 0 %></span>
        
                <button type="button" class="btn btn-outline-danger btn-sm vote-btn py-0 px-2" 
                        data-id="<%= comment.id %>" data-vote="downvote" aria-label="Downvote">
                    üëé
                </button>
                <span class="text-danger fw-semibold small"><%= comment.downvotes || 0 %></span>
                </div>
            </div>
            </div>
        <% }) %>
    </div>
<% } %>


<script>
    document.querySelectorAll('.vote-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const id = button.dataset.id;
        const voteType = button.dataset.vote;
  
        try {
          const response = await fetch(`/comments/${id}/${voteType}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
          });
          if (!response.ok) throw new Error('Network response was not ok');
  
          const data = await response.json();
  
          // Update counts in UI
          const parent = button.parentElement;
          if (voteType === 'upvote') {
            parent.querySelector('span.text-success').textContent = data.upvotes;
          } else {
            parent.querySelector('span.text-danger').textContent = data.downvotes;
          }
        } catch (error) {
          console.error('Voting failed:', error);
        }
      });
    });

    document.querySelectorAll('[data-utc]').forEach(el => {
    const utcString = el.getAttribute('data-utc');
    const localTime = new Date(utcString).toLocaleString(undefined, {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
    el.textContent = localTime;
    });
  </script>

<style>
    @media (max-width: 576px) {
      .vote-btn {
        font-size: 0.85rem;
      }
      .list-group-item p {
        font-size: 0.95rem;
      }
    }
  </style>
<!-- <script>
    document.querySelectorAll('.vote-btn').forEach(button => {
      button.addEventListener('click', async (e) => {
        const id = button.dataset.id;
        const voteType = button.dataset.vote;
        try {
          const res = await fetch(`/comments/${id}/${voteType}`, { method: 'POST' });
          const data = await res.json();
          if (data.upvotes !== undefined && data.downvotes !== undefined) {
            // Update counts in UI
            const parent = button.parentElement;
            if (voteType === 'upvote') {
              parent.querySelector('span:nth-child(2)').textContent = data.upvotes;
            } else {
              parent.querySelector('span:nth-child(4)').textContent = data.downvotes;
            }
          }
        } catch (err) {
          console.error('Voting error:', err);
        }
      });
    });
  </script> -->